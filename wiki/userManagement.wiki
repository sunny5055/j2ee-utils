#summary User management.
=user-management=

==Getting started==

There are several parts in the `user-management` configuration :
<ol> 
	<li>You need to set up a proper connection to your database, using Hibernate : </li>
		<ul>
			<li> The first bean you must declare is a `ComboPooledDataSource` object type. It handles a connection pool to your database.</li>
			<li> The second bean is a `LocalSessionFactoryBean` type of bean. It handles a JDBC connection to your database and manage the persisted objects. It reads into a `hibernate.properties``file. </li>
			<li> The thid bean is a `HibernateTransactionManager` type of bean. It uses the `sessionFactory` and handles all the database transactions </li>
		</ul>
	<li> You need to define a configuration using Spring's AOP, in order to manage the Hibernate transactions : </li>
		<ul>
			<li> Fist of all, you must define pointcuts for every of your DAOs and Services classes. All the methods contained in those classes, have to be handled by a transaction. </li>
			<li> You must define a `<tx:advice>` tag for your Services. Every method that begins with `get`, `find`, `exist` or `count` are read-only methods and implies that a transaction as already been opened. </li>
			<li> You must define a `<tx:advice>` tag for your DAOs. Every method that begins with `get`, `find`, `exist` or `count` are read-only methods, but doesn't implies that a transaction as already been opened. Generally, a transaction is opened every time a DAO method is being used.  </li>
		 </ul>
</ol>
{{{

}}}

After you've finished the Spring configuration, you must now define a `database.properties`, which is used by the `application-context.xml` file.
Here is an example of a `PostgreSQL` connection with `Hibernate` abd `c3po`.

{{{
# Jdbc
jdbc.driverClassName=org.postgresql.Driver
jdbc.maxActive=100
jdbc.maxWait=1000
jdbc.url=jdbc:postgresql://localhost:5432/user-management
jdbc.username=postgres
jdbc.password=postgres

# Hibernate
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate.show_sql=false
hibernate.hbm2ddl.auto=update
hibernate.connection.release_mode=auto
hibernate.auto_close_session=true
hibernate.cache.use_query_cache=false

# c3p0
c3p0.acquire_increment=1
c3p0.idle_test_period=100
c3p0.min_size=10
c3p0.max_size=100
c3p0.timeout=100
c3p0.max_statements=0
}}}

Finally, you must define a log4j.xml file that handles all the logging functions.

{{{
<?xml version="1.0" encoding="UTF-8" ?>
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<!-- APPENDER -->
	<appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c{3}] %m%n" />
		</layout>
	</appender>

	<logger name="org.hibernate">
		<level value="debug" />
		<appender-ref ref="CONSOLE" />
	</logger>
	<root>
		<level value="debug" />
		<appender-ref ref="CONSOLE" />
	</root>
</log4j:configuration>
}}}

Use the component as follows :

{{{
   public static void main(String[] args) {
    	
        final ApplicationContext context = new ClassPathXmlApplicationContext("spring/application-context.xml");
        final UserService userService = context.getBean(UserService.class);
        final RoleService roleService = context.getBean(RoleService.class);

        // Create an user with one role and three rights
        User user = new User();
        user.setFirstName("Malcom");
        user.setLastName("X");
        user.setLogin("login");
        user.setPassword("hello");
        user.setMail("malcom.x@gmail.com");
        
        Right delete = new Right();
        delete.setCode("DELETE");
        delete.setDescription("Allows to delete");
        Right insert = new Right();
        insert.setCode("INSERT");
        insert.setDescription("Allows to insert");
        Right edit = new Right();
        edit.setCode("EDIT");
        edit.setDescription("Allows to edit");
        
        List<Right> rights = new ArrayList<Right>();
        rights.add(delete);
        rights.add(insert);
        rights.add(edit);
        
        Role administrator = new Role();
        administrator.setCode("ADMIN");
        administrator.setDescription("The administrator of the system");
        administrator.setRights(rights);
        
        List<Role> roles = new ArrayList<Role>();
        roles.add(administrator);
        user.setRoles(roles);
        
        // Insert the user, his roles and his rights
        userService.create(user);
        user.setLogin(user.getFirstName() + user.getId());
        userService.update(user);
        
        // Print a the roles of the user
        List<Role> userRoles = roleService.findAllByUserId(user.getId());
        for (Role currentRole : userRoles)
        	System.out.println(currentRole.getCode());
        
        // Delete the user, his roles and his rights
        userService.delete(user);
}}}	